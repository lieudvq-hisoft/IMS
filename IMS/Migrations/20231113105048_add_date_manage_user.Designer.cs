// <auto-generated />
using System;
using Data.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace IMS.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231113105048_add_date_manage_user")]
    partial class add_date_manage_user
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Data.Entities.CompanyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CompanyTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2023, 11, 13, 17, 50, 47, 319, DateTimeKind.Local).AddTicks(9784),
                            DateUpdated = new DateTime(2023, 11, 13, 17, 50, 47, 319, DateTimeKind.Local).AddTicks(9800),
                            Description = "Doanh nghiệp tư nhân",
                            IsDeleted = false,
                            Name = "Doanh nghiệp tư nhân"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2023, 11, 13, 17, 50, 47, 319, DateTimeKind.Local).AddTicks(9827),
                            DateUpdated = new DateTime(2023, 11, 13, 17, 50, 47, 319, DateTimeKind.Local).AddTicks(9828),
                            Description = "Công ty trách nhiệm hữu hạn một thành viên",
                            IsDeleted = false,
                            Name = "Công ty trách nhiệm hữu hạn một thành viên"
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2023, 11, 13, 17, 50, 47, 319, DateTimeKind.Local).AddTicks(9840),
                            DateUpdated = new DateTime(2023, 11, 13, 17, 50, 47, 319, DateTimeKind.Local).AddTicks(9840),
                            Description = "Công ty trách nhiệm hữu hạn từ hai thành viên trở lên",
                            IsDeleted = false,
                            Name = "Công ty trách nhiệm hữu hạn từ hai thành viên trở lên"
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2023, 11, 13, 17, 50, 47, 319, DateTimeKind.Local).AddTicks(9850),
                            DateUpdated = new DateTime(2023, 11, 13, 17, 50, 47, 319, DateTimeKind.Local).AddTicks(9851),
                            Description = "Công ty cổ phần",
                            IsDeleted = false,
                            Name = "Công ty cổ phần"
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2023, 11, 13, 17, 50, 47, 319, DateTimeKind.Local).AddTicks(9861),
                            DateUpdated = new DateTime(2023, 11, 13, 17, 50, 47, 319, DateTimeKind.Local).AddTicks(9861),
                            Description = "Công ty hợp danh",
                            IsDeleted = false,
                            Name = "Công ty hợp danh"
                        });
                });

            modelBuilder.Entity("Data.Entities.Component", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Components");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2023, 11, 13, 17, 50, 47, 319, DateTimeKind.Local).AddTicks(9894),
                            DateUpdated = new DateTime(2023, 11, 13, 17, 50, 47, 319, DateTimeKind.Local).AddTicks(9894),
                            IsDeleted = false,
                            Name = "CPU",
                            Type = 1,
                            Unit = "Cái"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2023, 11, 13, 17, 50, 47, 319, DateTimeKind.Local).AddTicks(9982),
                            DateUpdated = new DateTime(2023, 11, 13, 17, 50, 47, 319, DateTimeKind.Local).AddTicks(9983),
                            IsDeleted = false,
                            Name = "GPU",
                            Type = 1,
                            Unit = "Cái"
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2023, 11, 13, 17, 50, 47, 319, DateTimeKind.Local).AddTicks(9997),
                            DateUpdated = new DateTime(2023, 11, 13, 17, 50, 47, 319, DateTimeKind.Local).AddTicks(9998),
                            IsDeleted = false,
                            Name = "RAM",
                            Type = 1,
                            Unit = "Gb"
                        },
                        new
                        {
                            Id = 6,
                            DateCreated = new DateTime(2023, 11, 13, 17, 50, 47, 320, DateTimeKind.Local).AddTicks(8),
                            DateUpdated = new DateTime(2023, 11, 13, 17, 50, 47, 320, DateTimeKind.Local).AddTicks(9),
                            IsDeleted = false,
                            Name = "RAM",
                            Type = 0,
                            Unit = "Gb"
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2023, 11, 13, 17, 50, 47, 320, DateTimeKind.Local).AddTicks(21),
                            DateUpdated = new DateTime(2023, 11, 13, 17, 50, 47, 320, DateTimeKind.Local).AddTicks(22),
                            IsDeleted = false,
                            Name = "OS",
                            Type = 1,
                            Unit = "Cái"
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2023, 11, 13, 17, 50, 47, 320, DateTimeKind.Local).AddTicks(33),
                            DateUpdated = new DateTime(2023, 11, 13, 17, 50, 47, 320, DateTimeKind.Local).AddTicks(33),
                            IsDeleted = false,
                            Name = "ROM",
                            Type = 1,
                            Unit = "Cái"
                        });
                });

            modelBuilder.Entity("Data.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CompanyTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TaxNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyTypeId");

                    b.HasIndex("TaxNumber")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Data.Entities.RequestUpgrade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<int>("ComponentId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InspectionReportFilePath")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ServerAllocationId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UserId1")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.HasIndex("ServerAllocationId");

                    b.HasIndex("UserId1");

                    b.ToTable("RequestUpgrades");
                });

            modelBuilder.Entity("Data.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(350)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("isDeactive")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("57ffb575-7c79-4133-8433-aebbcd71f824"),
                            Description = "IT Staff",
                            Name = "Tech",
                            isDeactive = false
                        },
                        new
                        {
                            Id = new Guid("4716f673-cef5-4edd-b67d-9c71599b9fab"),
                            Description = "Sale",
                            Name = "Sale",
                            isDeactive = false
                        },
                        new
                        {
                            Id = new Guid("1abb6e28-793d-460f-8a24-745998356da8"),
                            Description = "Manager",
                            Name = "Manager",
                            isDeactive = false
                        },
                        new
                        {
                            Id = new Guid("2e3566a9-02b1-4ec4-a2d4-b3bb3c4f2b45"),
                            Description = "Admin",
                            Name = "Admin",
                            isDeactive = false
                        });
                });

            modelBuilder.Entity("Data.Entities.ServerAllocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ExpectedSize")
                        .HasColumnType("integer");

                    b.Property<string>("InspectionRecordFilePath")
                        .HasColumnType("text");

                    b.Property<string>("InspectorNote")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("ReceiptOfRecipientFilePath")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("ServerAllocations");
                });

            modelBuilder.Entity("Data.Entities.ServerHardwareConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<int>("ComponentId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ServerAllocationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.HasIndex("ServerAllocationId");

                    b.ToTable("ServerHardwareConfigs");
                });

            modelBuilder.Entity("Data.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<int>("CurrenNoticeCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("PhoneNumber")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("57ffb575-7c79-4133-8433-aebbcd71f824"),
                            AccessFailedCount = 0,
                            Address = "Address1",
                            ConcurrencyStamp = "1734a571-57b2-4d50-8efc-b30a6ee71cf7",
                            CurrenNoticeCount = 0,
                            DateCreated = new DateTime(2023, 11, 13, 17, 50, 47, 320, DateTimeKind.Local).AddTicks(134),
                            DateUpdated = new DateTime(2023, 11, 13, 17, 50, 47, 320, DateTimeKind.Local).AddTicks(134),
                            Email = "super@gmail.com",
                            EmailConfirmed = true,
                            Fullname = "Fullname1",
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "super@gmail.com",
                            NormalizedUserName = "super",
                            PasswordHash = "AQAAAAIAAYagAAAAEHG6IQkzlvosX6gg3DA07EYO55t3OGFIKkZM+E3sbhjVMlptlREbB5A4nwCPbcZEfA==",
                            PhoneNumber = "0000000001",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "super"
                        },
                        new
                        {
                            Id = new Guid("4716f673-cef5-4edd-b67d-9c71599b9fab"),
                            AccessFailedCount = 0,
                            Address = "Address2",
                            ConcurrencyStamp = "eb2aac8f-2107-45e5-a521-1429ebfb2958",
                            CurrenNoticeCount = 0,
                            DateCreated = new DateTime(2023, 11, 13, 17, 50, 47, 398, DateTimeKind.Local).AddTicks(2232),
                            DateUpdated = new DateTime(2023, 11, 13, 17, 50, 47, 398, DateTimeKind.Local).AddTicks(2264),
                            Email = "tech@gmail.com",
                            EmailConfirmed = true,
                            Fullname = "Fullname2",
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "tech@gmail.com",
                            NormalizedUserName = "tech",
                            PasswordHash = "AQAAAAIAAYagAAAAELtyKTMUDf+AlMe2odrcOWHg8pX8Q9vg3dD/mu3Wa+L9BlmUBcjzYsBNDMhDRQP2PA==",
                            PhoneNumber = "0000000002",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "tech"
                        },
                        new
                        {
                            Id = new Guid("1abb6e28-793d-460f-8a24-745998356da8"),
                            AccessFailedCount = 0,
                            Address = "Address3",
                            ConcurrencyStamp = "cf2591ae-9b8c-4afb-8ebc-f550f7233513",
                            CurrenNoticeCount = 0,
                            DateCreated = new DateTime(2023, 11, 13, 17, 50, 47, 474, DateTimeKind.Local).AddTicks(6399),
                            DateUpdated = new DateTime(2023, 11, 13, 17, 50, 47, 474, DateTimeKind.Local).AddTicks(6417),
                            Email = "sale@gmail.com",
                            EmailConfirmed = true,
                            Fullname = "Fullname3",
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "sale@gmail.com",
                            NormalizedUserName = "sale",
                            PasswordHash = "AQAAAAIAAYagAAAAEEwKiXXCUBiIr8RK9eN75Ea88oXrkQrC83J9iejC0LU6Fs0UsRBIjVavp2c+6z5fwg==",
                            PhoneNumber = "0000000003",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "sale"
                        },
                        new
                        {
                            Id = new Guid("2e3566a9-02b1-4ec4-a2d4-b3bb3c4f2b45"),
                            AccessFailedCount = 0,
                            Address = "Address4",
                            ConcurrencyStamp = "2d646f42-fd40-41ac-83f7-9beb43b7edb0",
                            CurrenNoticeCount = 0,
                            DateCreated = new DateTime(2023, 11, 13, 17, 50, 47, 591, DateTimeKind.Local).AddTicks(3100),
                            DateUpdated = new DateTime(2023, 11, 13, 17, 50, 47, 591, DateTimeKind.Local).AddTicks(3112),
                            Email = "manager@gmail.com",
                            EmailConfirmed = true,
                            Fullname = "Fullname4",
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "manager@gmail.com",
                            NormalizedUserName = "manager",
                            PasswordHash = "AQAAAAIAAYagAAAAECXP/4dwHRu332QkOq4SY3odynZVaJGHrK4OpgEq6ujUBbJ/Ts5J4hNpFIONPt/MXQ==",
                            PhoneNumber = "0000000004",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "manager"
                        },
                        new
                        {
                            Id = new Guid("01fc684c-d9d0-4fcc-b0a7-56fea6945928"),
                            AccessFailedCount = 0,
                            Address = "Address5",
                            ConcurrencyStamp = "8d3f553e-f05f-4175-bcb2-c58bcda45494",
                            CurrenNoticeCount = 0,
                            DateCreated = new DateTime(2023, 11, 13, 17, 50, 47, 669, DateTimeKind.Local).AddTicks(8354),
                            DateUpdated = new DateTime(2023, 11, 13, 17, 50, 47, 669, DateTimeKind.Local).AddTicks(8367),
                            Email = "admin@gmail.com",
                            EmailConfirmed = true,
                            Fullname = "Fullname5",
                            IsDeleted = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "admin@gmail.com",
                            NormalizedUserName = "admin",
                            PasswordHash = "AQAAAAIAAYagAAAAEIzVTZ/nOuyrG1ESf3YvLgxTzJFEYurS3XxA4Q+2/OuHG/RTEv/vJVV6fjGtSKHK0A==",
                            PhoneNumber = "0000000005",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Data.Entities.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("57ffb575-7c79-4133-8433-aebbcd71f824"),
                            RoleId = new Guid("57ffb575-7c79-4133-8433-aebbcd71f824")
                        },
                        new
                        {
                            UserId = new Guid("57ffb575-7c79-4133-8433-aebbcd71f824"),
                            RoleId = new Guid("4716f673-cef5-4edd-b67d-9c71599b9fab")
                        },
                        new
                        {
                            UserId = new Guid("57ffb575-7c79-4133-8433-aebbcd71f824"),
                            RoleId = new Guid("1abb6e28-793d-460f-8a24-745998356da8")
                        },
                        new
                        {
                            UserId = new Guid("57ffb575-7c79-4133-8433-aebbcd71f824"),
                            RoleId = new Guid("2e3566a9-02b1-4ec4-a2d4-b3bb3c4f2b45")
                        },
                        new
                        {
                            UserId = new Guid("4716f673-cef5-4edd-b67d-9c71599b9fab"),
                            RoleId = new Guid("57ffb575-7c79-4133-8433-aebbcd71f824")
                        },
                        new
                        {
                            UserId = new Guid("1abb6e28-793d-460f-8a24-745998356da8"),
                            RoleId = new Guid("4716f673-cef5-4edd-b67d-9c71599b9fab")
                        },
                        new
                        {
                            UserId = new Guid("2e3566a9-02b1-4ec4-a2d4-b3bb3c4f2b45"),
                            RoleId = new Guid("1abb6e28-793d-460f-8a24-745998356da8")
                        },
                        new
                        {
                            UserId = new Guid("01fc684c-d9d0-4fcc-b0a7-56fea6945928"),
                            RoleId = new Guid("2e3566a9-02b1-4ec4-a2d4-b3bb3c4f2b45")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Data.Entities.Customer", b =>
                {
                    b.HasOne("Data.Entities.CompanyType", "CompanyType")
                        .WithMany("Customer")
                        .HasForeignKey("CompanyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyType");
                });

            modelBuilder.Entity("Data.Entities.RequestUpgrade", b =>
                {
                    b.HasOne("Data.Entities.Component", "Component")
                        .WithMany("RequestUpgrades")
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.ServerAllocation", "ServerAllocation")
                        .WithMany("RequestUpgrades")
                        .HasForeignKey("ServerAllocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.User", "User")
                        .WithMany("RequestUpgrades")
                        .HasForeignKey("UserId1");

                    b.Navigation("Component");

                    b.Navigation("ServerAllocation");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Data.Entities.ServerAllocation", b =>
                {
                    b.HasOne("Data.Entities.Customer", "Customer")
                        .WithMany("ServerAllocations")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Data.Entities.ServerHardwareConfig", b =>
                {
                    b.HasOne("Data.Entities.Component", "Component")
                        .WithMany("HardwareConfigs")
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.ServerAllocation", "ServerAllocation")
                        .WithMany("ServerHardwareConfigs")
                        .HasForeignKey("ServerAllocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Component");

                    b.Navigation("ServerAllocation");
                });

            modelBuilder.Entity("Data.Entities.UserRole", b =>
                {
                    b.HasOne("Data.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Entities.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Data.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Data.Entities.CompanyType", b =>
                {
                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Data.Entities.Component", b =>
                {
                    b.Navigation("HardwareConfigs");

                    b.Navigation("RequestUpgrades");
                });

            modelBuilder.Entity("Data.Entities.Customer", b =>
                {
                    b.Navigation("ServerAllocations");
                });

            modelBuilder.Entity("Data.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Data.Entities.ServerAllocation", b =>
                {
                    b.Navigation("RequestUpgrades");

                    b.Navigation("ServerHardwareConfigs");
                });

            modelBuilder.Entity("Data.Entities.User", b =>
                {
                    b.Navigation("RequestUpgrades");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
